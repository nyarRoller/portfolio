{"version":3,"sources":["Weather.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","class_name","temp_name","main_name","isLast","isFirst","className","date","temp","weather","max_temp","min_temp","cloud","wind_speed","Weather","handleSubmit","event","preventDefault","getDataCity","inputNode","value","state","city","first_get","pos","list","coords","error","setDef","cords","this","fetch","latitude","longitude","then","response","json","data","info","forEach","item","i","tm","Math","round","main","temp_max","temp_min","wind","speed","clouds","all","name","dt_txt","console","log","setState","catch","latlon","lat","lon","result","window","navigator","geolocation","getCurrentPosition","getDataCord","size","main_box","RingLoader","color","isLastFirst","onSubmit","type","ref","node","href","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6629217c.chunk.js","sourcesContent":["import './weather.css';\nimport React from 'react';\nimport { RingLoader } from 'react-spinners';\n\n \n\n\n\nfunction WeatherCard(props){\n    let class_name = \"weather-card\";\n    let temp_name = \"weather-card-element temp\"\n    let main_name = \"weather-card-element main\"\n\n    if (props.isLast){\n      class_name = \"weather-card last tn\";\n      temp_name = \"weather-card-element temp no_animate\"\n      main_name = \"weather-card-element main no_animate\"\n    }\n    if (props.isFirst){\n      temp_name = \"weather-card-element temp no_animate\"\n      main_name = \"weather-card-element main no_animate\"      \n    }\n      \n    return (\n      <div className={class_name}>\n          <div className=\"date tn\">{props.date}</div>\n          <div className={temp_name}>{props.temp} °C</div>\n          <div className={main_name}>{props.weather}</div>\n          <div className='weather-card-element max_temp tn'>Maximum: {props.max_temp} °C</div>\n          <div className='weather-card-element min_temp tn'>Minimum: {props.min_temp} °C</div>\n          <div className='weather-card-element cloudiness tn'>Clouds: {props.cloud}%</div>\n          <div className=\"weather-card-element wind_speed tn\">Wind speed: {props.wind_speed} Km/H</div>\n      </div>\n    )\n  \n}\n\nclass Weather extends React.Component {\nconstructor(props){\n  super(props);\n  this.state ={\n    city : \"London\",\n    first_get : false,\n    pos : [],\n    list : [\n      {\n        date : null,\n        temp : null,\n        max_temp : null,\n        min_temp : null,\n        weather : null,\n        cloud : null,\n        wind_speed : null,\n      },\n      {\n        date : null,\n        temp : null,\n        max_temp : null,\n        min_temp : null,\n        weather : null,\n        cloud : null,\n        wind_speed : null,\n      },\n      {\n        date : null,\n        temp : null,\n        max_temp : null,\n        min_temp : null,\n        weather : null,\n        cloud : null,\n        wind_speed : null,\n      }\n    ],\n    coords : null,\n    error : false,\n    setDef : true\n\n  }\n    // this.getGeo = navigator.geolocation.getCurrentPosition(this.getDataCord)\n\n} \n\n//\ngetDataCord(){\n  const cords = this.state.coords;\n  fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${cords.coords.latitude}&lon=${cords.coords.longitude}&units=metric&appid=948f7328f7cfd2ea91673c115454976d`) \n  .then(response => response.json())\n  .then(data => {\n    const tm = [0, 20, 39]\n    let info = this.state.list;\n    tm.forEach(function(item, i, tm){\n      info[i].temp = Math.round(data.list[item].main.temp);\n      info[i].max_temp = Math.round(data.list[item].main.temp_max);\n      info[i].min_temp = Math.round(data.list[item].main.temp_min);\n      info[i].wind_speed = data.list[item].wind.speed;\n      info[i].weather = data.list[item].weather[0].main;\n      info[i].cloud = data.list[item].clouds.all;\n      info[i].city = data.city.name;\n      info[i].date = data.list[item].dt_txt;\n    })\n    console.log(data.city.name)\n    this.setState({\n      list : info,\n      city : info[0].city\n  })\n\n    // console.log(data.main.temp)\n}).catch(error => console.log(error));\n}\n\n\n//the function getting data from openwatherapi,parsing and wrting them to the state\ngetDataCity(city){\n  //converting city to geocords\n  fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&appid=948f7328f7cfd2ea91673c115454976d`)\n  .then(latlon => latlon.json())\n  .then(latlon => latlon = [latlon[0].lat, latlon[0].lon]) \n  .then(\n    //return foreacast array with 40 values\n    result => fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${result[0]}&lon=${result[1]}&units=metric&appid=948f7328f7cfd2ea91673c115454976d`) \n  )\n  .then(response => response.json())\n  .then(data => {\n    const tm = [0, 20, 39] //which values in array we need\n    let info = this.state.list;\n\n    //writing array to the state\n    tm.forEach(function(item, i, tm){\n      info[i].temp = Math.round(data.list[item].main.temp);\n      info[i].max_temp = Math.round(data.list[item].main.temp_max);\n      info[i].min_temp = Math.round(data.list[item].main.temp_min);\n      info[i].wind_speed = data.list[item].wind.speed;\n      info[i].weather = data.list[item].weather[0].main;\n      info[i].cloud = data.list[item].clouds.all;\n      info[i].city = data.list[item].name;\n      info[i].date = data.list[item].dt_txt;\n    })\n    this.setState({\n      list : info,\n      city : city\n  })\n    // console.log(data.main.temp)\n});\n\n}\n\n//futction on the button\nhandleSubmit = (event) => {\n  event.preventDefault();\n  this.getDataCity(this.inputNode.value);\n  this.inputNode.value = \"\";\n}\ngetGeo() {\n\n   }\n\n  \n\nrender (){\n\n  //default value \n  const default_ = \"London\";\n  if (this.setState.setDef){\n\n  }\n\n\n  //checking is first values got\n  if (!this.state.first_get){\n    if (this.state.error != false){\n      this.setState({first_get : true})\n      this.getDataCity(default_);\n      this.setState({setDef : false});\n      console.log(\"[ERROR]\")\n\n    }\n    //getting currrent geolocation and writing to state\n    if (window.navigator.geolocation) {\n        window.navigator.geolocation\n        .getCurrentPosition(coords => {this.setState({coords : coords})}, error => {this.setState({error : error})});\n\n\n      console.log(this.state.error)\n      \n      if (this.state.coords != null){\n        this.setState({first_get : true});\n        console.log(this.state.coords)\n        this.getDataCord();\n    } \n    } else{\n      this.setState({first_get : true})\n    }\n  }\n\n\n  //current values\n  const city = this.state.city;\n  const info = this.state.list;\n  let size = 0;\n  let main_box = \"main_box\";\n  if (!this.state.first_get && this.state.list[0].temp === null){\n    main_box += \" invisiable\";\n    size = 200;\n  }\n  console.log(main_box)\n  //return weather object\n  return <div className=\"weater\">\n            <RingLoader color=\"#36d7b7\" \n            size = {size}\n            // cssOverride = {\"\"}\n\n            />\n\n            <div className={main_box}>\n              <div className=\"city\">{city}</div>\n              <div className='weather_cards'>\n                <WeatherCard\n                  temp = {info[0].temp}\n                  cloud = {info[0].cloud}\n                  wind_speed = {info[0].wind_speed}\n                  max_temp = {info[0].max_temp}\n                  weather = {info[0].weather}\n                  min_temp = {info[0].min_temp}\n                  date = {info[0].date}\n                  isFirst = {true}\n              />\n                <WeatherCard\n                  temp = {info[1].temp}\n                  cloud = {info[1].cloud}\n                  wind_speed = {info[1].wind_speed}\n                  max_temp = {info[1].max_temp}\n                  weather = {info[1].weather}\n                  min_temp = {info[1].min_temp}\n                  date = {info[1].date}\n                  isLastFirst = {false}\n              />\n                <WeatherCard\n                  temp = {info[2].temp}\n                  cloud = {info[2].cloud}\n                  wind_speed = {info[2].wind_speed}\n                  max_temp = {info[2].max_temp}\n                  weather = {info[2].weather}\n                  min_temp = {info[2].min_temp}\n                  date = {info[2].date}\n                  isLast = {true}\n              />\n              </div>\n\n              \n              <form onSubmit={this.handleSubmit}>\n                <div className=\"user-box\">\n                  <input type=\"text\" ref={node => (this.inputNode = node)}/>\n                  <label>City</label>\n                </div>\n                <button href=\"#\" onClick={this.handleSubmit} type=\"submit\">\n\n                  Submit\n                </button>\n      </form>\n            </div>          \n    </div>\n      \n    }\n  }\n\n\nexport default Weather;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Weather from './Weather';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Weather />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}